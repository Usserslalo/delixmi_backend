// ------------------------------------
// --- PRISMA SCHEMA V7.2 (FINAL, CORREGIDO PARA GENERACIÓN DMMF)
// --- [Eliminadas validaciones @@check y corregida relación bidireccional]
// ------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ------------------------------------
// --- ENUMS TIPADOS
// ------------------------------------

enum AuditEntity {
  USER
  RESTAURANT
  ORDER
  TRANSACTION
  DRIVER
  CONFIG
  COMPLAINT
  RATING
  MESSAGE
  PROMOTION
  SERVICE_AREA
  INVENTORY_LOG
  DRIVER_LOG
  NOTIFICATION
  RESTAURANT_CONFIG
  RESTAURANT_SCHEDULE
  ROUTE_LOG
}

enum ComplaintStatus {
  pending
  resolved
  closed
}

enum MessageType {
  system
  restaurant
  driver
  customer
}

enum UserStatus {
  pending
  active
  inactive
  suspended
  deleted
}

enum RestaurantStatus {
  pending_approval
  active
  inactive
  suspended
  rejected
}

enum OrderStatus {
  pending
  placed
  confirmed
  preparing
  ready_for_pickup
  out_for_delivery
  delivered
  cancelled
  refunded
}

enum PaymentStatus {
  pending
  processing
  completed
  failed
  cancelled
  refunded
}

enum DriverStatus {
  offline
  online
  busy
  unavailable
}

enum KycStatus {
  pending
  approved
  rejected
  under_review
}

enum TransactionType {
  RESTAURANT_ORDER_CREDIT
  RESTAURANT_PAYOUT_DEBIT
  RESTAURANT_REFUND_DEBIT
  RESTAURANT_PLATFORM_FEE_DEBIT
  DRIVER_DELIVERY_FEE_CREDIT
  DRIVER_TIPS_CREDIT
  DRIVER_PAYOUT_DEBIT
  DRIVER_PENALTY_DEBIT
  ADJUSTMENT_CREDIT
  ADJUSTMENT_DEBIT
}

enum DriverAssignmentStatus {
  OFFERED
  ACCEPTED
  REJECTED
  TIMEOUT
  CANCELLED
}

enum SessionType {
  ACTIVE
  BREAK
  OFFLINE
  MAINTENANCE
}

enum InventoryChangeReason {
  ORDER_SALE
  MANUAL_ADJUSTMENT
  RESTOCK
  TRANSFER
  SPOILAGE
}

enum PaymentMethodType {
  CASH
  CARD_ONLINE
  CARD_POS
  WALLET
  COUPON
}

enum AssignmentRejectionReason {
  TOO_FAR
  BAD_RATING_CUSTOMER
  BAD_RATING_RESTAURANT
  BAD_PAYOUT
  TOO_MUCH_WAITING
  OTHER
  NONE
}

enum ServiceAreaType {
  CITY
  NEIGHBORHOOD
  CUSTOM_POLYGON
}

enum NotificationType {
  ORDER_UPDATE
  PROMOTION
  SYSTEM_ALERT
  DRIVER_PAYOUT
  RESTAURANT_PAYOUT
  DRIVER_ASSIGNMENT
  RESTAURANT_UPDATE
}

// ------------------------------------
// --- Modelos de Configuración Global y Geografía
// ------------------------------------

model GlobalConfig {
  id                        Int       @id @default(1)
  defaultDeliveryRadius     Decimal   @map("default_delivery_radius") @db.Decimal(10, 2)
  globalCommissionRate      Decimal   @map("global_commission_rate") @db.Decimal(10, 2)
  baseDeliveryFee           Decimal   @map("base_delivery_fee") @db.Decimal(10, 2)
  systemTerms               String?   @map("system_terms") @db.Text
  systemPrivacyPolicy       String?   @map("system_privacy_policy") @db.Text
  minAppVersionCustomer     String    @map("min_app_version_customer") @db.VarChar(10) @default("1.0.0")
  minAppVersionDriver       String    @map("min_app_version_driver") @db.VarChar(10) @default("1.0.0")
  minAppVersionRestaurant   String    @map("min_app_version_restaurant") @db.VarChar(10) @default("1.0.0")
  updatedAt                 DateTime  @updatedAt

  @@map("global_config")
}

model ServiceArea {
  id                    Int           @id @default(autoincrement())
  name                  String        @unique @db.VarChar(100)
  description           String?       @db.Text
  type                  ServiceAreaType
  centerLatitude        Decimal?      @map("center_latitude") @db.Decimal(10, 7)
  centerLongitude       Decimal?      @map("center_longitude") @db.Decimal(10, 7)
  radiusKm              Decimal?      @map("radius_km") @db.Decimal(10, 2)
  polygonCoordinates    Json?         @map("polygon_coordinates")
  isActive              Boolean       @map("is_active") @default(true)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  deletedAt             DateTime?     @map("deleted_at") @db.Timestamp(6)

  restaurantsInArea     RestaurantServiceArea[] 
  
  @@index([isActive])
  @@index([type, isActive])
  @@map("service_areas")
}

model RestaurantServiceArea {
  restaurantId          Int           @map("restaurant_id")
  serviceAreaId         Int           @map("service_area_id")
  createdAt             DateTime      @default(now())
  deletedAt             DateTime?     @map("deleted_at") @db.Timestamp(6)
  
  restaurant            Restaurant    @relation(fields: [restaurantId], references: [id])
  serviceArea           ServiceArea   @relation(fields: [serviceAreaId], references: [id])

  @@id([restaurantId, serviceAreaId])
  @@unique([restaurantId, serviceAreaId])
  @@index([serviceAreaId, restaurantId])
  @@map("restaurant_service_areas")
}


// ------------------------------------
// --- Modelos de Autenticación y Permisos
// ------------------------------------

model Role {
  id                    Int                 @id @default(autoincrement())
  name                  String              @unique @db.VarChar(50)
  displayName           String              @map("display_name") @db.VarChar(100)
  description           String?             @db.Text
  createdAt             DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime            @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt             DateTime?           @map("deleted_at") @db.Timestamp(6)
  roleHasPermissions    RoleHasPermission[]
  userRoleAssignments   UserRoleAssignment[]

  @@index([createdAt])
  @@map("roles")
}

model Permission {
  id                    Int                 @id @default(autoincrement())
  name                  String              @unique @db.VarChar(100)
  displayName           String              @map("display_name") @db.VarChar(150)
  module                String              @db.VarChar(50)
  createdAt             DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime            @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt             DateTime?           @map("deleted_at") @db.Timestamp(6)
  roleHasPermissions    RoleHasPermission[]

  @@index([createdAt])
  @@map("permissions")
}

model RoleHasPermission {
  roleId                Int       @map("role_id")
  permissionId          Int       @map("permission_id")
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt             DateTime? @map("deleted_at") @db.Timestamp(6)
  permission            Permission @relation(fields: [permissionId], references: [id])
  role                  Role      @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@index([permissionId], map: "role_has_permissions_permission_id_fkey")
  @@map("role_has_permissions")
}

model User {
  id                        Int                 @id @default(autoincrement())
  name                      String              @db.VarChar(100)
  lastname                  String              @db.VarChar(100)
  email                     String              @unique @db.VarChar(150)
  phone                     String              @unique @db.VarChar(20)
  password                  String              @db.VarChar(255)
  emailVerifiedAt           DateTime?           @map("email_verified_at") @db.Timestamp(6)
  phoneVerifiedAt           DateTime?           @map("phone_verified_at") @db.Timestamp(6)
  phoneOtp                  String?             @map("phone_otp") @db.VarChar(6)
  phoneOtpExpiresAt         DateTime?           @map("phone_otp_expires_at") @db.Timestamp(6)
  imageUrl                  String?             @map("image_url") @db.VarChar(255)
  notificationToken         String?             @map("notification_token") @db.VarChar(255)
  status                    UserStatus          @default(pending)
  isSuspicious              Boolean             @default(false) @map("is_suspicious")
  createdAt                 DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime            @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt                 DateTime?           @map("deleted_at") @db.Timestamp(6)
  passwordResetExpiresAt    DateTime?           @map("password_reset_expires_at") @db.Timestamp(6)
  passwordResetToken        String?             @unique @map("password_reset_token") @db.VarChar(255)
  addresses                 Address[]
  carts                     Cart[]
  driverProfile             DriverProfile?
  driverWallet              DriverWallet?
  ordersAsCustomer          Order[]             @relation("CustomerOrders")
  ordersAsDriver            Order[]             @relation("DriverOrders")
  refreshTokens             RefreshToken[]
  restaurantOwned           Restaurant?
  userRoleAssignments       UserRoleAssignment[]
  auditLogs                 AuditLog[]
  messagesSent              AdminMessage[]      @relation("Sender")
  messagesReceived          AdminMessage[]      @relation("Recipient")
  complaints                Complaint[]
  driverAssignmentLogs      DriverAssignmentLog[]
  driverSessions            DriverSession[]
  productInventoryLogs      ProductInventoryLog[]
  notifications             Notification[]
  routeLogs                 RouteLog[]
  promotionsApproved        RestaurantPromotion[] @relation("PromotionApprover") // ✅ CORRECCIÓN AÑADIDA

  @@index([status])
  @@index([createdAt])
  @@index([isSuspicious])
  @@map("users")
}

model UserRoleAssignment {
  id                    Int           @id @default(autoincrement())
  userId                Int           @map("user_id")
  roleId                Int           @map("role_id")
  restaurantId          Int?          @map("restaurant_id")
  createdAt             DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime      @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt             DateTime?     @map("deleted_at") @db.Timestamp(6)
  restaurant            Restaurant?   @relation(fields: [restaurantId], references: [id])
  role                  Role          @relation(fields: [roleId], references: [id])
  user                  User          @relation(fields: [userId], references: [id])

  @@index([restaurantId, roleId], map: "user_role_assignments_restaurant_role_idx") 
  @@index([roleId], map: "user_role_assignments_role_id_fkey")
  @@index([userId], map: "user_role_assignments_user_id_fkey")
  @@map("user_role_assignments")
}

// ------------------------------------
// --- Modelo de Restaurante, Configuración y Menú
// ------------------------------------

model Restaurant {
  id                        Int                 @id @default(autoincrement())
  ownerId                   Int                 @unique @map("owner_id")
  name                      String              @db.VarChar(150)
  description               String?             @db.Text
  logoUrl                   String?             @map("logo_url") @db.VarChar(255)
  coverPhotoUrl             String?             @map("cover_photo_url") @db.VarChar(255)
  commissionRate            Decimal             @default(10.00) @map("commission_rate") @db.Decimal(10, 2)
  status                    RestaurantStatus    @default(pending_approval)
  isManuallyVerified        Boolean             @default(false) @map("is_manually_verified")
  isGloballyOpen            Boolean             @default(true) @map("is_globally_open")
  createdAt                 DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime            @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt                 DateTime?           @map("deleted_at") @db.Timestamp(6)
  rating                    Float?              @default(0)
  category                  String?             @db.VarChar(50)
  address                   String?             @db.Text
  email                     String?             @db.VarChar(150)
  phone                     String?             @db.VarChar(20)
  latitude                  Decimal?            @db.Decimal(10, 7)
  longitude                 Decimal?            @map("longitude") @db.Decimal(10, 7)
  uses_platform_drivers     Boolean             @default(true)
  delivery_fee              Decimal             @default(25.00) @map("delivery_fee") @db.Decimal(10, 2)
  delivery_radius           Decimal             @default(5.00) @map("delivery_radius") @db.Decimal(10, 2)
  estimated_delivery_max    Int                 @default(35)
  estimated_delivery_min    Int                 @default(25)

  modifierGroups            ModifierGroup[]
  carts                     Cart[]
  products                  Product[]
  wallet                    RestaurantWallet?
  owner                     User                @relation(fields: [ownerId], references: [id])
  subcategories             Subcategory[]
  userRoleAssignments       UserRoleAssignment[]
  orders                    Order[]             @relation("RestaurantOrders")
  ratings                   Rating[]
  complaints                Complaint[]
  messages                  AdminMessage[]      @relation("Restaurant")
  promotions                RestaurantPromotion[]
  serviceAreas              RestaurantServiceArea[]
  
  // ✅ Nuevos modelos de gestión (Control del Owner)
  config                    RestaurantConfig?
  schedules                 RestaurantSchedule[]
  metrics                   RestaurantMetrics?

  @@index([ownerId], map: "restaurants_owner_id_fkey")
  @@index([status])
  @@index([createdAt])
  @@index([status, createdAt])
  @@map("restaurants")
}

// ✅ Configuración de Restaurante (Owner Control)
model RestaurantConfig {
  id                        Int       @id @default(autoincrement())
  restaurantId              Int       @unique @map("restaurant_id")
  autoAcceptOrders          Boolean   @default(false) @map("auto_accept_orders")
  maxDeliveryRadius         Decimal   @default(5.00) @map("max_delivery_radius") @db.Decimal(10, 2)
  minOrderAmount            Decimal   @default(0.00) @map("min_order_amount") @db.Decimal(10, 2)
  deliveryTimeEstimate      Int       @default(30) @map("delivery_time_estimate_minutes")
  isOpen                    Boolean   @default(true) @map("is_open")
  createdAt                 DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  
  restaurant                Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("restaurant_configs")
}

// ✅ Horarios Detallados del Restaurante
model RestaurantSchedule {
  id                        Int       @id @default(autoincrement())
  restaurantId              Int       @map("restaurant_id")
  dayOfWeek                 Int       @map("day_of_week") // 0-6 (Domingo-Sábado)
  openTime                  String    @map("open_time") @db.VarChar(8)
  closeTime                 String    @map("close_time") @db.VarChar(8)
  isActive                  Boolean   @default(true) @map("is_active")
  createdAt                 DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  
  restaurant                Restaurant @relation(fields: [restaurantId], references: [id])

  @@unique([restaurantId, dayOfWeek])
  @@index([restaurantId, dayOfWeek])
  @@map("restaurant_schedules")
}

// ✅ Métricas Agregadas para Reportes del Owner
model RestaurantMetrics {
  id                        Int       @id @default(autoincrement())
  restaurantId              Int       @unique @map("restaurant_id")
  totalOrders               Int       @default(0) @map("total_orders")
  totalRevenue              Decimal   @default(0.00) @map("total_revenue") @db.Decimal(12, 2)
  averageOrderValue         Decimal   @default(0.00) @map("avg_order_value") @db.Decimal(10, 2)
  customerRating            Decimal   @default(0.00) @map("customer_rating") @db.Decimal(3, 2)
  onTimeDeliveryRate        Decimal   @default(0.00) @map("on_time_delivery_rate") @db.Decimal(5, 2)
  lastUpdated               DateTime  @default(now()) @map("last_updated")

  restaurant                Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("restaurant_metrics")
}

model RestaurantPromotion {
  id                    Int           @id @default(autoincrement())
  restaurantId          Int           @map("restaurant_id")
  startDate             DateTime      @map("start_date")
  endDate               DateTime      @map("end_date")
  maxSpots              Int           @map("max_spots") @default(5)
  pricePaid             Decimal       @map("price_paid") @db.Decimal(10, 2)
  displayPriority       Int           @map("display_priority") @default(0)
  isActive              Boolean       @map("is_active") @default(true)
  clickCount            Int           @default(0) @map("click_count")
  viewCount             Int           @default(0) @map("view_count")
  approvedBy            Int?          @map("approved_by")
  approvedAt            DateTime?     @map("approved_at")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  deletedAt             DateTime?     @map("deleted_at") @db.Timestamp(6)
  
  restaurant            Restaurant    @relation(fields: [restaurantId], references: [id])
  approver              User?         @relation("PromotionApprover", fields: [approvedBy], references: [id])

  @@index([restaurantId, startDate, endDate])
  @@index([displayPriority])
  @@index([isActive, endDate])
  @@map("restaurant_promotions")
}

model Category {
  id                    Int           @id @default(autoincrement())
  name                  String        @unique @db.VarChar(100)
  imageUrl              String?       @map("image_url") @db.VarChar(255)
  createdAt             DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime      @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt             DateTime?     @map("deleted_at") @db.Timestamp(6)
  subcategories         Subcategory[]

  @@map("categories")
}

model Subcategory {
  id                    Int           @id @default(autoincrement())
  restaurantId          Int           @map("restaurant_id")
  categoryId            Int           @map("category_id")
  name                  String        @db.VarChar(100)
  displayOrder          Int           @default(0) @map("display_order")
  is_active             Boolean       @default(true) @map("is_active")
  createdAt             DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime      @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt             DateTime?     @map("deleted_at") @db.Timestamp(6)
  products              Product[]
  category              Category      @relation(fields: [categoryId], references: [id])
  restaurant            Restaurant    @relation(fields: [restaurantId], references: [id])

  @@unique([restaurantId, categoryId, name])
  @@index([categoryId], map: "subcategories_category_id_fkey")
  @@index([is_active])
  @@map("subcategories")
}

model Product {
  id                    Int                 @id @default(autoincrement())
  restaurantId          Int                 @map("restaurant_id")
  subcategoryId         Int                 @map("subcategory_id")
  name                  String              @db.VarChar(150)
  description           String?             @db.Text
  imageUrl              String?             @map("image_url") @db.VarChar(255)
  price                 Decimal             @db.Decimal(10, 2)
  isAvailable           Boolean             @default(true) @map("is_available")
  isFlagged             Boolean             @default(false) @map("is_flagged")
  
  // 🎯 INVENTARIO: Stock y Log
  stockQuantity         Int                 @default(0) @map("stock_quantity")
  inventoryLogs         ProductInventoryLog[]
  
  createdAt             DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime            @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt             DateTime?           @map("deleted_at") @db.Timestamp(6)
  tags                  String?             @db.Text
  modifierGroups        ProductModifier[]
  cartItems             CartItem[]
  orderItems            OrderItem[]
  restaurant            Restaurant          @relation(fields: [restaurantId], references: [id])
  subcategory           Subcategory         @relation(fields: [subcategoryId], references: [id])

  @@unique([restaurantId, subcategoryId, name])
  @@index([restaurantId], map: "products_restaurant_id_fkey")
  @@index([subcategoryId], map: "products_subcategory_id_fkey")
  @@index([isFlagged])
  @@index([restaurantId, createdAt])
  @@map("products")
}

model ProductInventoryLog {
  id                    BigInt    @id @default(autoincrement())
  productId             Int       @map("product_id")
  userId                Int       @map("user_id")
  change                Int
  newQuantity           Int       @map("new_quantity")
  reason                InventoryChangeReason
  
  createdAt             DateTime  @default(now())

  product               Product   @relation(fields: [productId], references: [id])
  user                  User      @relation(fields: [userId], references: [id])

  @@index([productId, createdAt])
  @@index([userId, createdAt])
  @@index([productId, userId, createdAt])
  @@map("product_inventory_logs")
}

model ModifierGroup {
  id                    Int                 @id @default(autoincrement())
  name                  String
  restaurantId          Int                 @map("restaurant_id")
  minSelection          Int                 @default(1) @map("min_selection")
  maxSelection          Int                 @default(1) @map("max_selection")
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")
  deletedAt             DateTime?           @map("deleted_at") @db.Timestamp(6)
  restaurant            Restaurant          @relation(fields: [restaurantId], references: [id])
  options               ModifierOption[]
  products              ProductModifier[]

  @@index([restaurantId], map: "modifier_groups_restaurant_id_fkey")
  @@map("modifier_groups")
}

model ModifierOption {
  id                    Int                 @id @default(autoincrement())
  name                  String
  price                 Decimal             @db.Decimal(10, 2)
  modifierGroupId       Int                 @map("modifier_group_id")
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")
  deletedAt             DateTime?           @map("deleted_at") @db.Timestamp(6)
  modifierGroup         ModifierGroup       @relation(fields: [modifierGroupId], references: [id])
  cartItemModifiers     CartItemModifier[]
  orderItemModifiers    OrderItemModifier[]

  @@index([modifierGroupId], map: "modifier_options_modifier_group_id_fkey")
  @@map("modifier_options")
}

model ProductModifier {
  productId             Int
  modifierGroupId       Int       @map("modifier_group_id")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  deletedAt             DateTime? @map("deleted_at") @db.Timestamp(6)
  modifierGroup         ModifierGroup @relation(fields: [modifierGroupId], references: [id])
  product               Product       @relation(fields: [productId], references: [id])

  @@id([productId, modifierGroupId])
  @@index([modifierGroupId, productId])
  @@map("product_modifiers")
}

model Cart {
  id                    Int           @id @default(autoincrement())
  userId                Int           @map("user_id")
  restaurantId          Int           @map("restaurant_id")
  createdAt             DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime      @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt             DateTime?     @map("deleted_at") @db.Timestamp(6)
  items                 CartItem[]
  restaurant            Restaurant    @relation(fields: [restaurantId], references: [id])
  user                  User          @relation(fields: [userId], references: [id])

  @@unique([userId, restaurantId])
  @@index([restaurantId], map: "carts_restaurant_id_fkey")
  @@map("carts")
}

model CartItem {
  id                    Int                 @id @default(autoincrement())
  cartId                Int                 @map("cart_id")
  productId             Int                 @map("product_id")
  quantity              Int                 @default(1)
  priceAtAdd            Decimal             @map("price_at_add") @db.Decimal(10, 2)
  createdAt             DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime            @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt             DateTime?           @map("deleted_at") @db.Timestamp(6)
  modifiers             CartItemModifier[]
  cart                  Cart                @relation(fields: [cartId], references: [id])
  product               Product             @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([productId], map: "cart_items_product_id_fkey")
  @@map("cart_items")
}

model CartItemModifier {
  id                    Int               @id @default(autoincrement())
  cartItemId            Int               @map("cart_item_id")
  modifierOptionId      Int               @map("modifier_option_id")
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")
  deletedAt             DateTime?         @map("deleted_at") @db.Timestamp(6)
  cartItem              CartItem          @relation(fields: [cartItemId], references: [id])
  modifierOption        ModifierOption    @relation(fields: [modifierOptionId], references: [id])

  @@index([cartItemId, modifierOptionId])
  @@map("cart_item_modifiers")
}

model Address {
  id                    Int       @id @default(autoincrement())
  userId                Int       @map("user_id")
  alias                 String    @db.VarChar(50)
  street                String    @db.VarChar(255)
  exteriorNumber        String    @map("exterior_number") @db.VarChar(50)
  interiorNumber        String?   @map("interior_number") @db.VarChar(50)
  neighborhood          String    @db.VarChar(150)
  city                  String    @db.VarChar(100)
  state                 String    @db.VarChar(100)
  zipCode               String    @map("zip_code") @db.VarChar(10)
  references            String?   @db.Text
  latitude              Decimal   @db.Decimal(10, 7)
  longitude             Decimal   @db.Decimal(10, 7)
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt             DateTime? @map("deleted_at") @db.Timestamp(6)
  user                  User      @relation(fields: [userId], references: [id])
  orders                Order[]

  @@index([userId], map: "addresses_user_id_fkey")
  @@map("addresses")
}

model Order {
  id                        BigInt                  @id @default(autoincrement())
  customerId                Int                     @map("customer_id")
  restaurantId              Int                     @map("restaurant_id")
  addressId                 Int                     @map("address_id")
  deliveryDriverId          Int?                    @map("delivery_driver_id")
  status                    OrderStatus             @default(pending)
  
  // MONTOS BASE
  subtotal                  Decimal                 @db.Decimal(10, 2)
  deliveryFee               Decimal                 @default(0.00) @map("delivery_fee") @db.Decimal(10, 2)
  total                     Decimal                 @db.Decimal(10, 2)

  // INGRESOS DE LA PLATAFORMA Y PAGOS AL RESTAURANTE (BASE DE CÁLCULO)
  commissionRateSnapshot    Decimal                 @map("commission_rate_snapshot") @db.Decimal(10, 2)
  platformFee               Decimal                 @map("platform_fee") @db.Decimal(10, 2)
  
  // 🎯 CAMPOS FISCALES PARA RESTAURANTE (Retenciones SAT)
  retainedIVA               Decimal                 @default(0.00) @map("retained_iva") @db.Decimal(10, 2)
  retainedISR               Decimal                 @default(0.00) @map("retained_isr") @db.Decimal(10, 2)
  restaurantPayout          Decimal                 @map("restaurant_payout") @db.Decimal(10, 2)

  // 🎯 CAMPOS FISCALES PARA REPARTIDOR (Retenciones SAT)
  driverFeeGross            Decimal                 @default(0.00) @map("driver_fee_gross") @db.Decimal(10, 2)
  driverRetainedIVA         Decimal                 @default(0.00) @map("driver_retained_iva") @db.Decimal(10, 2)
  driverRetainedISR         Decimal                 @default(0.00) @map("driver_retained_isr") @db.Decimal(10, 2)
  driverFeeNet              Decimal                 @default(0.00) @map("driver_fee_net") @db.Decimal(10, 2)
  
  // ✅ PAGO MEJORADO
  paymentId                 BigInt?                 @unique @map("payment_id")
  paymentMethod             PaymentMethodType       @default(CASH) @map("payment_method_type")
  paymentStatus             PaymentStatus           @default(pending) @map("payment_status")
  
  // ✅ AJUSTE DE FECHAS DE EVENTOS
  orderPlacedAt             DateTime                @default(now()) @map("order_placed_at") @db.Timestamp(6)
  orderConfirmedAt          DateTime?               @map("order_confirmed_at") @db.Timestamp(6)
  orderPreparedAt           DateTime?               @map("order_prepared_at") @db.Timestamp(6)
  orderReadyForPickupAt     DateTime?               @map("order_ready_for_pickup_at") @db.Timestamp(6)
  orderDeliveredAt          DateTime?               @map("order_delivered_at") @db.Timestamp(6)
  
  createdAt                 DateTime                @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime                @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt                 DateTime?               @map("deleted_at") @db.Timestamp(6)
  specialInstructions       String?                 @map("special_instructions") @db.Text
  
  driverWalletTransactions  DriverWalletTransaction[]
  orderItems                OrderItem[]
  address                   Address                 @relation(fields: [addressId], references: [id])
  restaurant                Restaurant              @relation("RestaurantOrders", fields: [restaurantId], references: [id])
  customer                  User                    @relation("CustomerOrders", fields: [customerId], references: [id])
  deliveryDriver            User?                   @relation("DriverOrders", fields: [deliveryDriverId], references: [id])
  payment                   Payment?
  restaurantWalletTransactions RestaurantWalletTransaction[]
  ratings                   Rating?
  driverAssignmentLogs      DriverAssignmentLog[]
  routeLogs                 RouteLog[]

  // Los constraints @@check se eliminan por incompatibilidad con MySQL, la lógica pasa al backend.

  @@index([addressId], map: "orders_address_id_fkey")
  @@index([restaurantId], map: "orders_restaurant_id_fkey")
  @@index([customerId], map: "orders_customer_id_fkey")
  @@index([deliveryDriverId], map: "orders_delivery_driver_id_fkey")
  @@index([status, createdAt])
  @@map("orders")
}

model OrderItem {
  id                    BigInt              @id @default(autoincrement())
  orderId               BigInt              @map("order_id")
  productId             Int                 @map("product_id")
  quantity              Int                 @default(1)
  pricePerUnit          Decimal             @map("price_per_unit") @db.Decimal(10, 2)
  createdAt             DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime            @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt             DateTime?           @map("deleted_at") @db.Timestamp(6)
  modifiers             OrderItemModifier[]
  order                 Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product               Product             @relation(fields: [productId], references: [id])

  @@index([orderId], map: "order_items_order_id_fkey")
  @@index([productId], map: "order_items_product_id_fkey")
  @@map("order_items")
}

model OrderItemModifier {
  id                    BigInt          @id @default(autoincrement())
  orderItemId           BigInt          @map("order_item_id")
  modifierOptionId      Int             @map("modifier_option_id")
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  deletedAt             DateTime?       @map("deleted_at") @db.Timestamp(6)
  modifierOption        ModifierOption  @relation(fields: [modifierOptionId], references: [id])
  orderItem             OrderItem       @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@index([orderItemId, modifierOptionId])
  @@map("order_item_modifiers")
}

model Payment {
  id                    BigInt          @id @default(autoincrement())
  orderId               BigInt          @unique @map("order_id")
  amount                Decimal         @db.Decimal(10, 2)
  currency              String          @default("MXN") @db.VarChar(10)
  provider              String          @db.VarChar(50)
  providerPaymentId     String?         @unique @map("provider_payment_id") @db.VarChar(255)
  status                PaymentStatus
  createdAt             DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime        @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt             DateTime?       @map("deleted_at") @db.Timestamp(6)
  order                 Order           @relation(fields: [orderId], references: [id])

  @@map("payments")
}


// ------------------------------------
// --- Modelos de Billeteras y Drivers
// ------------------------------------

model DriverProfile {
  userId                Int           @id @map("user_id")
  vehicleType           String?       @map("vehicle_type") @db.VarChar(50)
  licensePlate          String?       @map("license_plate") @db.VarChar(20)
  status                DriverStatus  @default(offline)
  currentLatitude       Decimal?      @map("current_latitude") @db.Decimal(10, 7)
  currentLongitude      Decimal?      @map("current_longitude") @db.Decimal(10, 7)
  lastSeenAt            DateTime?     @map("last_seen_at") @db.Timestamp(6)
  kycStatus             KycStatus     @default(pending) @map("kyc_status")
  isBlocked             Boolean       @default(false) @map("is_blocked")
  
  // ✅ DATOS FISCALES (Matriz I)
  rfc                   String?       @map("rfc") @db.VarChar(13)
  domicilioFiscal       String?       @map("domicilio_fiscal") @db.Text
  opcionPagoDefinitivo  Boolean       @default(false) @map("opcion_pago_definitivo") // Art. 113-A LISR
  
  createdAt             DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime      @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt             DateTime?     @map("deleted_at") @db.Timestamp(6)
  user                  User          @relation(fields: [userId], references: [id])
  complaints            Complaint[]   @relation("DriverComplaints")

  @@index([status])
  @@index([kycStatus])
  @@index([createdAt])
  @@map("driver_profiles")
}

// ✅ Modelado de Logística Operativa y Rastreo (RouteLog)
model RouteLog {
    id            BigInt    @id @default(autoincrement())
    orderId       BigInt    @map("order_id")
    driverId      Int       @map("driver_id")
    timestamp     DateTime  @default(now())
    latitude      Decimal   @db.Decimal(10, 7)
    longitude     Decimal   @db.Decimal(10, 7)
    eventType     String    @db.VarChar(50) // 'Departure', 'Arrival', 'Incident', 'EnRoute'

    order         Order     @relation(fields: [orderId], references: [id])
    driver        User      @relation(fields: [driverId], references: [id])

    // Indexación forense crítica para alto volumen
    @@index([orderId, timestamp])
    @@index([driverId, timestamp])
    @@map("route_logs")
}

model RestaurantWallet {
  id                    Int                       @id @default(autoincrement())
  restaurantId          Int                       @unique @map("restaurant_id")
  balance               Decimal                   @default(0.00) @db.Decimal(10, 2)
  updatedAt             DateTime                  @updatedAt
  deletedAt             DateTime?                 @map("deleted_at") @db.Timestamp(6)
  transactions          RestaurantWalletTransaction[]
  restaurant            Restaurant                @relation(fields: [restaurantId], references: [id])

  @@map("restaurant_wallets")
}

model RestaurantWalletTransaction {
  id                    BigInt        @id @default(autoincrement())
  walletId              Int           @map("wallet_id")
  orderId               BigInt?       @map("order_id")
  type                  TransactionType
  amount                Decimal       @db.Decimal(10, 2)
  balanceAfter          Decimal       @db.Decimal(10, 2)
  description           String?       @db.Text
  isPaidOut             Boolean       @default(false) @map("is_paid_out")
  paidOutAt             DateTime?     @map("paid_out_at")
  externalId            String?       @map("external_id") @db.VarChar(255)
  createdAt             DateTime      @default(now())
  deletedAt             DateTime?     @map("deleted_at") @db.Timestamp(6)
  order                 Order?        @relation(fields: [orderId], references: [id])
  wallet                RestaurantWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "restaurant_wallet_transactions_order_id_fkey")
  @@index([walletId], map: "restaurant_wallet_transactions_wallet_id_fkey")
  @@index([isPaidOut])
  @@map("restaurant_wallet_transactions")
}

model DriverAssignmentLog {
  id                    BigInt        @id @default(autoincrement())
  orderId               BigInt        @map("order_id")
  driverId              Int           @map("driver_id")
  status                DriverAssignmentStatus
  rejectionReason       AssignmentRejectionReason @default(NONE)
  assignedAt            DateTime      @default(now()) @map("assigned_at")
  respondedAt           DateTime?     @map("responded_at")
  responseTimeSeconds   Int?
  isAutoAssigned        Boolean       @default(false) @map("is_auto_assigned")
  deletedAt             DateTime?     @map("deleted_at") @db.Timestamp(6)

  order                 Order         @relation(fields: [orderId], references: [id])
  driver                User          @relation(fields: [driverId], references: [id])

  @@index([orderId, driverId, assignedAt])
  @@index([status, assignedAt])
  @@map("driver_assignment_logs")
}

model DriverSession {
  id                    BigInt        @id @default(autoincrement())
  driverId              Int           @map("driver_id")
  start_time            DateTime      @map("start_time")
  end_time              DateTime?     @map("end_time")
  start_latitude        Decimal?      @map("start_latitude") @db.Decimal(10, 7)
  start_longitude       Decimal?      @map("start_longitude") @db.Decimal(10, 7)
  end_latitude          Decimal?      @map("end_latitude") @db.Decimal(10, 7)
  end_longitude         Decimal?      @map("end_longitude") @db.Decimal(10, 7)
  
  ordersCompleted       Int           @default(0) @map("orders_completed")
  earnings              Decimal       @default(0.00) @db.Decimal(10, 2)
  sessionType           SessionType   @default(ACTIVE) @map("session_type")
  
  averageResponseTime   Int?          @map("avg_response_time_seconds")
  customerRating        Decimal?      @map("avg_customer_rating") @db.Decimal(3, 2)
  onTimeDeliveryRate    Decimal?      @map("on_time_delivery_rate") @db.Decimal(5, 2)
  
  deletedAt             DateTime?     @map("deleted_at") @db.Timestamp(6)

  driver                User          @relation(fields: [driverId], references: [id])
  
  // Los checks de coordenadas se mueven al backend.
  
  @@index([driverId, start_time]) 
  @@index([start_time])
  @@index([sessionType, start_time])
  @@map("driver_sessions")
}

model DriverWallet {
  id                    Int                       @id @default(autoincrement())
  driverId              Int                       @unique @map("driver_id")
  balance               Decimal                   @default(0.00) @db.Decimal(10, 2)
  updatedAt             DateTime                  @updatedAt
  deletedAt             DateTime?                 @map("deleted_at") @db.Timestamp(6)
  transactions          DriverWalletTransaction[]
  driver                User                      @relation(fields: [driverId], references: [id])

  @@map("driver_wallets")
}

model DriverWalletTransaction {
  id                    BigInt        @id @default(autoincrement())
  walletId              Int           @map("wallet_id")
  orderId               BigInt?       @map("order_id")
  type                  TransactionType
  amount                Decimal       @db.Decimal(10, 2)
  balanceAfter          Decimal       @db.Decimal(10, 2)
  description           String?       @db.Text
  isPaidOut             Boolean       @default(false) @map("is_paid_out")
  paidOutAt             DateTime?     @map("paid_out_at")
  externalId            String?       @map("external_id") @db.VarChar(255)
  createdAt             DateTime      @default(now())
  deletedAt             DateTime?     @map("deleted_at") @db.Timestamp(6)
  order                 Order?        @relation(fields: [orderId], references: [id])
  wallet                DriverWallet  @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "driver_wallet_transactions_order_id_fkey")
  @@index([walletId], map: "driver_wallet_transactions_wallet_id_fkey")
  @@index([isPaidOut])
  @@map("driver_wallet_transactions")
}

model RefreshToken {
  id                    String    @id @default(cuid())
  token                 String    @unique
  userId                Int       @map("user_id")
  expiresAt             DateTime  @map("expires_at")
  createdAt             DateTime  @default(now()) @map("created_at")
  deletedAt             DateTime? @map("deleted_at") @db.Timestamp(6)
  user                  User      @relation(fields: [userId], references: [id])

  @@index([userId], map: "refresh_tokens_user_id_fkey")
  @@map("refresh_tokens")
}

// ------------------------------------
// --- Auditoría, Soporte y Comunicación
// ------------------------------------

model AuditLog {
  id                    BigInt      @id @default(autoincrement())
  userId                Int?
  action                String
  entity                AuditEntity
  entityId              BigInt?
  details               Json?
  createdAt             DateTime    @default(now())
  user                  User?       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity])
  @@index([entity, entityId])
  @@map("audit_logs")
}

model Complaint {
  id                    Int               @id @default(autoincrement())
  userId                Int               @map("user_id")
  restaurantId          Int?              @map("restaurant_id")
  driverId              Int?              @map("driver_id")
  orderId               BigInt?           @map("order_id")
  subject               String            @db.VarChar(255)
  description           String            @db.Text
  status                ComplaintStatus   @default(pending)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  deletedAt             DateTime?         @map("deleted_at") @db.Timestamp(6)
  user                  User              @relation(fields: [userId], references: [id])
  restaurant            Restaurant?       @relation(fields: [restaurantId], references: [id])
  driverProfile         DriverProfile?    @relation("DriverComplaints", fields: [driverId], references: [userId])

  @@index([status])
  @@index([orderId])
  @@index([restaurantId])
  @@index([driverId])
  @@map("complaints")
}

model Rating {
  id                    Int         @id @default(autoincrement())
  orderId               BigInt      @unique @map("order_id")
  restaurantId          Int         @map("restaurant_id")
  customerId            Int         @map("customer_id")
  driverId              Int?        @map("driver_id")
  restaurantScore       Int?        @db.SmallInt
  driverScore           Int?        @db.SmallInt
  comment               String?     @db.Text
  isReported            Boolean     @default(false) @map("is_reported")
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  deletedAt             DateTime?   @map("deleted_at") @db.Timestamp(6)
  order                 Order       @relation(fields: [orderId], references: [id])
  restaurant            Restaurant  @relation(fields: [restaurantId], references: [id])

  @@index([restaurantId])
  @@index([driverId])
  @@index([isReported])
  @@index([restaurantId, createdAt])
  @@map("ratings")
}

model AdminMessage {
  id                    Int           @id @default(autoincrement())
  senderId              Int           @map("sender_id")
  recipientId           Int?          @map("recipient_id")
  restaurantId          Int?          @map("restaurant_id")
  subject               String        @db.VarChar(150)
  body                  String        @db.Text
  type                  MessageType   @default(system)
  isGlobal              Boolean       @default(false) @map("is_global")
  isRead                Boolean       @default(false) @map("is_read")
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  deletedAt             DateTime?     @map("deleted_at") @db.Timestamp(6)
  sender                User          @relation("Sender", fields: [senderId], references: [id])
  recipient             User?         @relation("Recipient", fields: [recipientId], references: [id])
  restaurant            Restaurant?   @relation("Restaurant", fields: [restaurantId], references: [id])

  @@index([isGlobal])
  @@index([type])
  @@map("admin_messages")
}

model Notification {
  id                    BigInt        @id @default(autoincrement())
  userId                Int           @map("user_id")
  title                 String        @db.VarChar(255)
  message               String        @db.Text
  type                  NotificationType
  isRead                Boolean       @default(false)
  createdAt             DateTime      @default(now())

  user                  User          @relation(fields: [userId], references: [id])
  
  @@index([userId, isRead])
  @@map("notifications")
}