/**
 * Script de prueba para WebSocket del Dashboard del Owner
 * FASE 2A - Infraestructura WebSocket
 */

const { io } = require('socket.io-client');
const axios = require('axios');

// Configuraci√≥n
const BASE_URL = 'https://delixmi-backend.onrender.com';
const WEBSOCKET_URL = 'wss://delixmi-backend.onrender.com';

async function getOwnerToken() {
  try {
    console.log('üîë Obteniendo token de owner...');
    const response = await axios.post(`${BASE_URL}/api/auth/login`, {
      email: 'ana.garcia@pizzeria.com',
      password: 'supersecret'
    });
    
    console.log('‚úÖ Login exitoso');
    return response.data.data.accessToken;
  } catch (error) {
    console.error('‚ùå Error en login:', error.response?.data || error.message);
    return null;
  }
}

async function testWebSocketConnection() {
  try {
    console.log('üß™ PROBANDO CONEXI√ìN WEBSOCKET');
    console.log('================================');
    
    // Obtener token
    const token = await getOwnerToken();
    if (!token) {
      console.log('‚ùå No se pudo obtener token. Abortando prueba.');
      return;
    }

    console.log(`üîó Conectando a: ${WEBSOCKET_URL}`);
    console.log(`üîë Token: ${token.substring(0, 20)}...`);
    console.log('');

    // Crear conexi√≥n WebSocket
    const socket = io(WEBSOCKET_URL, {
      auth: {
        token: token
      },
      transports: ['websocket'],
      timeout: 10000
    });

    // Eventos de conexi√≥n
    socket.on('connect', () => {
      console.log('‚úÖ WebSocket conectado exitosamente');
      console.log(`üì° Socket ID: ${socket.id}`);
      console.log('');
    });

    socket.on('CONNECTION_ESTABLISHED', (data) => {
      console.log('üéâ CONEXI√ìN ESTABLECIDA');
      console.log('======================');
      console.log(`üìä Socket ID: ${data.data.socketId}`);
      console.log(`üë§ User ID: ${data.data.userId}`);
      console.log(`üìß Email: ${data.data.userEmail}`);
      console.log(`üë§ Nombre: ${data.data.userName}`);
      console.log(`üè™ Restaurant ID: ${data.data.restaurantId}`);
      console.log(`üè† Restaurant Room: ${data.data.restaurantRoom}`);
      console.log(`‚è∞ Timestamp: ${data.data.timestamp}`);
      console.log(`üí¨ Mensaje: ${data.data.message}`);
      console.log('');

      // Probar unirse al dashboard
      console.log('üìä Uni√©ndose al dashboard...');
      socket.emit('JOIN_DASHBOARD', {});
    });

    socket.on('DASHBOARD_JOINED', (data) => {
      console.log('‚úÖ UNIDO AL DASHBOARD');
      console.log('====================');
      console.log(`üè† Dashboard Room: ${data.data.dashboardRoom}`);
      console.log(`üè™ Restaurant ID: ${data.data.restaurantId}`);
      console.log(`‚è∞ Timestamp: ${data.data.timestamp}`);
      console.log(`üí¨ Mensaje: ${data.data.message}`);
      console.log('');

      // Probar ping/pong
      console.log('üèì Probando ping/pong...');
      socket.emit('ping');
    });

    socket.on('pong', (data) => {
      console.log('üèì Pong recibido:', data.message);
      console.log(`‚è∞ Timestamp: ${data.timestamp}`);
      console.log('');

      // Probar salir del dashboard
      console.log('üìä Saliendo del dashboard...');
      socket.emit('LEAVE_DASHBOARD', {});
    });

    socket.on('DASHBOARD_LEFT', (data) => {
      console.log('‚úÖ SALI√ì DEL DASHBOARD');
      console.log('======================');
      console.log(`üè† Dashboard Room: ${data.data.dashboardRoom}`);
      console.log(`üè™ Restaurant ID: ${data.data.restaurantId}`);
      console.log(`‚è∞ Timestamp: ${data.data.timestamp}`);
      console.log(`üí¨ Mensaje: ${data.data.message}`);
      console.log('');

      // Cerrar conexi√≥n
      console.log('üîå Cerrando conexi√≥n...');
      socket.disconnect();
    });

    // Eventos de error
    socket.on('CONNECTION_ERROR', (data) => {
      console.log('‚ùå ERROR DE CONEXI√ìN');
      console.log('====================');
      console.log(`üí¨ Error: ${data.data.error}`);
      console.log(`‚è∞ Timestamp: ${data.data.timestamp}`);
    });

    socket.on('connect_error', (error) => {
      console.log('‚ùå Error de conexi√≥n:', error.message);
    });

    socket.on('disconnect', (reason) => {
      console.log('üîå Desconectado:', reason);
      console.log('');
      console.log('üéâ PRUEBA COMPLETADA');
      console.log('===================');
      console.log('‚úÖ Conexi√≥n WebSocket: EXITOSA');
      console.log('‚úÖ Autenticaci√≥n JWT: EXITOSA');
      console.log('‚úÖ Rooms por restaurante: EXITOSO');
      console.log('‚úÖ Dashboard handler: EXITOSO');
      console.log('');
      console.log('üöÄ La infraestructura WebSocket est√° lista para la Fase 2B!');
    });

    // Timeout de seguridad
    setTimeout(() => {
      if (socket.connected) {
        console.log('‚è∞ Timeout alcanzado. Cerrando conexi√≥n...');
        socket.disconnect();
      }
    }, 30000);

  } catch (error) {
    console.error('‚ùå Error en prueba WebSocket:', error.message);
  }
}

// Ejecutar prueba
testWebSocketConnection();
